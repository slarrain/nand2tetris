// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // We process the zx with a Mux
   Mux16 (a=x, b=false, sel=zx, out=outzx);

   // We process nx. First we need to negate the output
   Not16 (in=outzx, out=outnotzx);
   Mux16 (a=outzx, b=outnotzx, sel=nx, out=outnx);

   // We process the zy with a Mux
   Mux16 (a=y, b=false, sel=zy, out=outzy);

   // We process ny. First we need to negate the output
   Not16 (in=outzy, out=outnotzy);
   Mux16 (a=outzy, b=outnotzy, sel=ny, out=outny);

   // We process f. First we need to add and and the output
   Add16 (a=outnx, b=outny, out=outadd);
   And16 (a=outnx, b=outny, out=outand);
   Mux16 (a=outand, b=outadd, sel=f, out=outf);

   // We process no. First we negate the output
   Not16 (in=outf, out=outnotno);
   // the final is in order to work with it on the zr and ng
   Mux16 (a=outf, b=outnotno, sel=no, out=final);

   // Process zr
   // Had to create a new HDL because sub bus of an internal node may not be used
   Or16Way (in=final, out=zrnot);
   Not (in=zrnot, out=zr);

   //Process ng
   // Remember that if out[15]=1, then out<0
   IsNegative16 (in=final, out=ng);

   // Changing final to out
   Mux16 (a=final, b=false, sel=false, out=out);

}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beginning, the square is located at the top-left corner
 * of the screen. The arrow keys are used to move the square.
 * The 'z' & 'x' keys are used to decrement and increment the size.
 * The 'q' key is used to quit the game.
 */
class SquareGame {

    // The square
    field Square square;

		field int level;

    // The square's movement direction
    field int direction; // 0=none,1=up,2=down,3=left,4=right

    /** Constructs a new Square Game. */
    constructor SquareGame new() {
        let square = Square.new(0, 1, 5);
        let direction = 0;

				let level = 0;
				do Screen.setColor(true);
				do Screen.drawCircle(425, 250, 4);
        return this;
    }

		method void lines (boolean draw) {

				do Screen.setColor(draw);
				do line_level();
				return;
		}

		method void line_level () {
			if (level = 1) {
				do Screen.drawLine(0,0, 450, 0);
        do Screen.drawLine(0,30, 400, 30);
        do Screen.drawLine(450,0, 450, 254);
        do Screen.drawLine(400,30, 400, 254);

			}

			do Screen.drawLine(0,0, 450, 0);
			do Screen.drawLine(450,0, 450, 130);
			do Screen.drawLine(450,130, 130, 130);
			do Screen.drawLine(130,130, 130, 160);
			do Screen.drawLine(130,160, 320, 160);
			do Screen.drawLine(320,160, 320, 254);
			do Screen.drawLine(320,255, 0, 255);

      do Screen.drawLine(0,30, 400, 30);
      do Screen.drawLine(400,30, 400, 100);
			do Screen.drawLine(400,100, 100, 100);
			do Screen.drawLine(100,100, 100, 180);
			do Screen.drawLine(100,180, 300, 180);
			do Screen.drawLine(300,180, 300, 240);
			do Screen.drawLine(300,240, 0, 240);
			return;
		}

		method void circle() {
			if (level = 1) {
				do Screen.setColor(true);
				do Screen.drawCircle(425, 250, 4);
			}
			return;
		}

/*
		method boolean array_positions () {
			field int x1, y1, x2, y2;
			field Array position;
			let x1 = square.x;
			let y1 = square.y;
			let x2 = x1 + square.size;
			let y2 = y1 + square.size;
			let position = Array.new()
		}

*/









    /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the square's movement, direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;
				do lines(true);
				do circle();

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 90) {
                do square.decSize();
            }
            if (key = 88) {
                do square.incSize();
            }
            if (key = 131) {
                let direction = 1;
            }
            if (key = 133) {
                let direction = 2;
            }
            if (key = 130) {
                let direction = 3;
            }
            if (key = 132) {
                let direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSquare();
            }
        }
            
        return;
	}

    /** Moves the square by 2 pixels in the current direction. */
    method void moveSquare() {
        if (direction = 1) {
            do square.moveUp();
        }
        if (direction = 2) {
            do square.moveDown();
        }
        if (direction = 3) {
            do square.moveLeft();
        }
        if (direction = 4) {
            do square.moveRight();
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }

}

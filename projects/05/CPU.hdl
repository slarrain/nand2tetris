// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Not instruc_15
    Not (in=instruction[15], out=notIn15);
    Mux16 (a=outM2, b=instruction, sel=notIn15, out=outMuxPreA);


    Or (a=notIn15, b=instruction[5], out=loadA);
    //Register A
    ARegister (in=outMuxPreA, load=loadA, out=addressM16, out[0..14]=addressM);

    Mux16 (a=addressM16, b=inM, sel=instruction[12], out=outMuxPreALU);

    //Need to build the C for Register D
    And (a=instruction[15], b=instruction[4], out=preRegD);
    //Register D
    DRegister (in=outM2, load=preRegD, out=outRD);

    //Process the ALU with c1..c6
    ALU (x=outRD, y=outMuxPreALU, zx=instruction[11], nx=instruction[10],
      zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
       out=outM, zr=zr, ng=ng, out=outM2);

    //When do we load? When there is a jump
    // Jump case 1: instr_2 & instr_15 & ng
    And (a=instruction[2], b=instruction[15], out=and215);
    And (a=and215, b=ng, out=jumpcase1);

    //Jump Case 2: inst_15 & inst_1 & zr
    And (a=instruction[1], b=instruction[15], out=and115);
    And (a=and115, b=zr, out=jumpcase2);

    //Jum Case 3: inst_15 & inst_0 & !ng & !zr
    Not (in=ng, out=notNg);
    Not (in=zr, out=notZr);
    // ANDem all!
    And (a=instruction[0], b=instruction[15], out=and015);
    And (a=notNg, b=notZr, out=andNotNgZr);
    And (a=and015, b=andNotNgZr, out=jumpcase3);

    //And now we OR the 3 jump cases
    Or (a=jumpcase1, b=jumpcase2, out=jumpcase12);
    Or (a=jumpcase12, b=jumpcase3, out=load);

    // You can always Increment
    Xor (a=reset, b=reset, out=preinc);
    Not (in=preinc, out=inc);
    PC (in=addressM16, load=load, inc=inc, reset=reset, out[0..14]=pc);
    And (a=instruction[3], b=instruction[15], out=writeM);

}
